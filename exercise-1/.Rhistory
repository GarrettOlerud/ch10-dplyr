introduction <- paste("Hello, my name is", name, "and I'm", age, "years old")
return(introduction)
}
make_introduction(my_name, my_age)
add_three <- function(number){
return(number + 3)
}
add_three(7)
my_intro <- make_introduction(my_name, my_age)
casual_intro <- function(name, age){
paste("Hey, I'm", name, "and I'm", age, "years old")
}
casual_intro(my_name, my_age)
casual_intro <- sub("Hey, I'm", "Hello, my name is", my_intro)
casual_intro
casual_intro <- gsub("Hey, I'm", "Hello, my name is", my_intro)
casual_intro <- gsub("Hey, I'm", "Hello, my name is", my_intro)
casual_intro <- gsub("Hello, my name is", "Hey, I'm", my_intro)
casual_intro
loud_intro <- toupper(my_intro)
loud_intro
quiet_intro <- tolower(my_intro)
quiet_intro
library(stringr)
double <- function(number){
number * 2
}
double(3)
double(24)
minutes_in_two_days <- double(minutes_in_a_day)
cube <- function(number){
number^3
}
cube(2)
cube(5)
twenty_seven <- cube(3)
movies <- c("Shawshank Redemption", "Cinderella Man", "Shutter Island", "John Wick", "Superbad", "I Love You Man")
library(stringr)
library(stringr)
capitalized <- str_to_title(my_intro)
occurrences <- str_count("e", my_intro)
occurrences <- str_count(my_intro, "e")
occurrences
top_three <- movies[1:3]
excited <- paste(movies[1:3], "is a great movie")
excited
without_four <- movies[-4]
without_four
numbers <- c(700:999)
len <- length(numbers)
numbers_mean <- mean(numbers)
numbers_median <- median(numbers)
lower_numbers <- c(500:699)
all_numbers <- c(lower_numbers, numbers)
today <- Sys.Date()
summer_break <- as.Date("6-8-2018")
summer_break <- as.Date("2018-6-8")
days_to_break <- summer_break - today
days_to_break
capitalized
days_to_break
my_intro
my_intro
quiet_intro
casual_intro
numbers
numbers_mean
numbers_median
my_intro
occurrences
days_to_break
my_intro
double(8)
cube(5)
cube(476)
movies
without_four
excited
more_minutes_than_hours
my_bday_intro
# a2-foundational-skills
# Set up and Defining variables ------------------------------------------------
# Install and load the the `stringr` package
# It has a variety of functions that make working with string variables easier
install.packages("stringr")
library(stringr)
# Create a numeric variable `my_age` that is equal to your age
my_age <- 19
# Create a variable `my_name` that is equal to your first name
my_name <- "garrett"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- sum(60 * 24)
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- sum(24 * 365)
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age) {
introduction <- paste("Hello, my name is", name, "and I'm", age, "years old.")
return(introduction)
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub("Hello, my name is", "Hey, I'm", my_intro)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(number) {
number * 2
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(number) {
number ^ 3
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Shawshank Redemption", "Cinderella Man",
"Shutter Island", "John Wick", "Superbad", "I Love You Man")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1:3]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies[1:3], "is a great movie")
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- movies[-4]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- c(500:699)
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
all_numbers <- c(lower_numbers, numbers)
# Dates ------------------------------------------------------------------------
# Use the appropriate function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- Sys.Date()
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2018). Make sure to use the `as.Date` function again
summer_break <- as.Date("2018-6-8")
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- summer_break - today
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
days_till_bday <- as.Date("2018-9-10") - today
new_age <- my_age + 1
make_birthday_intro <- function(name, age, days, new_age) {
intro <- make_introduction(name, age)
birthday_intro <- paste0(intro, " In ", days, " days I'll be ", new_age, ".")
return(birthday_intro)
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, days_till_bday, new_age)
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(a, b){
x <- c("INFO 201", "CSE 142")
remove <- gsub("[0-9]+", " ", x)
return(remove)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(x)
my_bday_intro
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have acces
# Exercise 1: working with data frames (review)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
# Filter the data set for vehicles manufactured in 1997
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
# What was the most efficient Honda model of 1995?
install.packages("devtools")
View("vehicles")
View(vehicles)
setwd("C:/Users/Garre/Desktop/info201/ch10-dplyr/exercise-1")
View("vehicles")
library(fueleconomy)
View("fueleconomy")
View(vehicles)
makes <- vehicles$make
makes
total_makes <- unique(makes)
total_makes
x1997 <- vehicles$year == 1997
x1997
x1997 <- vehicles[vehicles$year == 1997,]
x1997
View(x1997)
View(x1997)
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
cars_1997 <- x1997[order(x1997$hwy),]
View(cars_1997)
install.packages("dplyr")
library(dplyr)
library(dplyr)
iris[,"Sepal.Width"]
large_widths <- filter(iris, Sepal.width)
large_widths <- filter(iris, Petal.Width > 1)
large_widths
large_widths <- filter(iris, Petal.Width > 2, Sepal.Width >2)
iris_mutated <- mutate(iris, rarion = Sepal.Width/ Petal.Width)
View(iris_mutated)
library(dplyr)
makes
makes <- vehicles$make
total_makes <- distinct(makes)
total_makes <- distinct_(makes)
total_makes <- distinct(vehicles$make)
total_makes <- distinct(makes)
distinct_makes <- distinct(makes)
makes <- vehicles$make
library(dplyr)
distinct_makes <- distinct(makes)
distinct_makes <- distinct(vehicles, make)
year <- Filter(year, 1997)
year <- Filter(vehicles$year, 1997)
year <- Filter(vehicles$year, 1997)
year <- Filter(vehicles$year, 1997,)
Year_made <- Filter(vehicles$year, 1997)
Year_made <- filter(vehicles, year==1997)
cars_1997 <- x1997[order(x1997$hwy),]
x1997 <- vehicles[vehicles$year == 1997,]
cars_1997 <- x1997[order(x1997$hwy),]
View(cars_1997)
average <- mutate(ave_cars_1997 = ave(cars_1997$hwy + cars_1997$cty))
cars_1997 <- mutate(cars_1997, average = (hwy + cty) / 2)
average <- mutate(cars_1997, average = (hwy + cty) / 2)
cars_1997 <- arrange(cars_1997, hwy)
View(average)
two_wheel_20_mpg <- filter(vehicles, drive == "2-Wheel Drive", city > 20)
two_wheel_20_mpg <- filter(vehicles, drive == "2-Wheel Drive", cty > 20)
View(two_wheel_20_mpg)
worst_vehicle <- filter(two_wheel_20_mpg, min(cty))
worst_vehicle <- filter(two_wheel_20_mpg, hwy == min(hwy))
worst_hwy <- select(filtered, id)
worst_vehicle <- filter(two_wheel_20_mpg, hwy == min(hwy))
worst_hwy <- select(worst_vehicle, id)
worst_hwy
best_mpg <- function(year_choice, make_choice){
filtered <- filter(vehicles, year == year_choice, make == make_choice)
filtered <- filter(filtered, hwy == max(hwy))
selected <- select(filtered, model)
return(selected)
}
best_mpg(Honda, 1995)
best_mpg(1995, Honda)
best_mpg(1995, "Honda")
cars_1997 <- x1997[order(x1997$hwy), hwy == max(hwy)]
cars_1997 <- x1997[order(x1997), hwy == max(hwy)]
cars_1997 <- x1997[order(x1997, hwy == max(hwy))]
total_makes <- length(unique(makes))
total_makes
x1997 <- x1997[order(x1997$hwy)]
x1997 <- x1997[order(x1997$hwy),]
average <- mutate(ave_cars_1997 = ave(x1997$hwy + x1997$cty))
x1997$average <- ((x1997$cty + x1997$hwy) / 2)
# Exercise 1: working with data frames (review)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
total_makes <- length(unique(makes))
# Filter the data set for vehicles manufactured in 1997
x1997 <- vehicles[vehicles$year == 1997,]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
x1997 <- x1997[order(x1997$hwy),]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
x1997$average <- ((x1997$cty + x1997$hwy) / 2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
# What was the most efficient Honda model of 1995?
# Exercise 1: working with data frames (review)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
total_makes <- length(unique(makes))
# Filter the data set for vehicles manufactured in 1997
x1997 <- vehicles[vehicles$year == 1997,]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
x1997 <- x1997[order(x1997$hwy),]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
x1997$average <- ((x1997$cty + x1997$hwy) / 2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
# What was the most efficient Honda model of 1995?
x1997$average <- ((x1997$cty + x1997$hwy) / 2)
install.packages("devtools")
install.packages("devtools")
x1997$average <- ((x1997$cty + x1997$hwy) / 2)
x1997 <- x1997[order(x1997$hwy),]
total_makes <- length(unique(makes))
View(vehicles)
devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
View(vehicles)
two_wheel_drive <- vehicles[vehicles$drive == "2-Wheel Drive", vehicles$cty >20 ]
two_wheel_drive <- vehicles[vehicles$drive == "2-Wheel Drive", vehicles$cty >20, ]
two_wheel_drive <- vehicles[vehicles$drive == "2-Wheel Drive", vehicles$cty > 20, ]
two_wheel_drive <- vehicles[vehicles$drive == "2-Wheel Drive" & vehicles$cty > 20, ]
two_wheel_drive_worst <- two_wheel_drive$id[two_wheel_drive$hwy == min(two_wheel_drive$hwy)]
year_choice <- function(year_choice, make_choice){
filtered <- vehicles[year == year_choice, make == make_choice]
filtered <- vehicles[filtered$hwy == max(vehicles$hwy),]
selected <- vehicles(filtered, id)
return(selected)
}
year_choice(1995, "Honda")
year_choice(1995, "Honda")
year_choice <- function(year_choice, make_choice){
filtered <- vehicles[year_choice == year, make_choice == make]
filtered <- vehicles[filtered$hwy == max(vehicles$hwy),]
selected <- vehicles(filtered, id)
return(selected)
}
year_choice <- function(year_choice, make_choice){
filtered <- vehicles[year_choice == year, make_choice == make]
filtered <- vehicles[filtered$hwy == max(vehicles$hwy),]
selected <- vehicles(filtered, id)
return(selected)
}
year_choice <- function(year_choice, make_choice){
filtered <- vehicles[year_choice == year, make_choice == make]
filtered <- vehicles[filtered$hwy == max(vehicles$hwy),]
selected <- vehicles(filtered, id)
return(selected)
}
year_choice(1995, "Honda")
year_choice <- function(year_choice, make_choice){
filtered <- vehicles[vehicles$year == year_choice, vehicles$make == make_choice]
filtered <- vehicles[filtered$hwy == max(vehicles$hwy),]
selected <- vehicles(filtered, id)
return(select)
}
year_choice(1995, "Honda")
filtered <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice]
year_choice <- function(year_choice, make_choice){
filtered <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice]
filtered <- vehicles[filtered$hwy == max(vehicles$hwy),]
selected <- vehicles(filtered, id)
return(select)
year_choice(1995, "Honda")
year_choice(1995, "Honda")
year_choice <- function(year_choice, make_choice){
filtered <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice,]
filtered <- vehicles[filtered$hwy == max(vehicles$hwy),]
selected <- vehicles(filtered, id)
return(select)
}
year_choice(1995, "Honda")
year_choice <- function(year_choice, make_choice){
filtered <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice,]
filtered <- vehicles[filtered$hwy == max(vehicles$hwy), "model"]
return("model")
}
year_choice(1995, "Honda")
year_choice <- function(year_choice, make_choice){
filtered <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice,]
filtered <- filtered[filtered$hwy == max(filtered$hwy), "model"]
return("model")
}
year_choice(1995, "Honda")
year_choice <- function(year_choice, make_choice){
filtered <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice,]
filtered <- filtered[filtered$hwy == max(filtered$hwy), "model"]
}
year_choice(1995, "Honda")
year_choice <- function(year_choice, make_choice){
filtered <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice, ]
filtered[filtered$hwy == max(filtered$hwy), "model"]
}
year_choice(1995, "Honda")
year_choice(1990, "Audi")
year_choice(2004, "Audi")
year_choice(1968, "Ford")
year_choice(2014, "Ford")
year_choice(2000, "Audi")
year_choice(2004, Jaguar)
year_choice(2004, "Mercedes")
best_mpg <- function(year_choice, make_choice){
filtered <- filter(vehicles, year == year_choice, make == make_choice)
filtered <- filter(filtered, hwy == max(hwy))
selected <- select(filtered, model)
return(selected)
}
best_mpg(2014, "Mercedes")
makes
distinct_makes <- distinct(vehicles, make)
library(dplyr)
distinct_makes <- distinct(vehicles, make)
distinct_makes
View(distinct_makes)
best_mpg(2004, "Mercedes-Benz")
best_mpg(1998, "BMW")
best_mpg(2000,"ferrari")
best_mpg(2000, "Ferrari")
